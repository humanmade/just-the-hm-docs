// The basic two column layout
@use "sass:meta";

:root {
  --sidebar-width: max(
    var(--sidebar-content-width),
    calc(
      (100% - #{rems($nav-width + $content-width)}) / 2 + #{rems($nav-width)}
    )
  );
  --sidebar-content-width: #{rems($nav-width-md)};

  @include mq(lg) {
    --sidebar-content-width: #{rems($nav-width)};
  }
}

body {
  position: relative;
  padding-bottom: $sp-10;
  overflow-y: scroll;

  @include mq(md) {
    &:has(.side-bar) {
      display: grid;
      grid-template-columns: var(--sidebar-width) 1fr;
      position: static;
      padding-bottom: 0;
    }
  }
}

.side-bar {
  z-index: 0;
  display: flex;
  flex-wrap: wrap;
  background-color: $sidebar-color;

  @include mq(md) {
    align-items: flex-end;
    border-right: $border $border-color;
    flex-flow: column nowrap;
    height: 100%;
    position: fixed;
    width: var(--sidebar-width);
  }

  .site-nav,
  .site-header,
  .site-footer {
    width: 100%;

    @include mq(md) {
      width: var(--sidebar-content-width);
    }
  }

  & + .main {
    @include mq(md) {
      grid-column-start: 2;
      margin-left: 0;
      max-width: min(
        rems($content-width),
        calc(100vw - var(--sidebar-content-width))
      );
    }

    .main-header {
      display: none;
      background-color: $sidebar-color;

      @include mq(md) {
        display: flex;
        background-color: $body-background-color;
      }

      &.nav-open {
        display: block;

        @include mq(md) {
          display: flex;
        }
      }
    }
  }
}

.main {
  margin: auto;

  @include mq(md) {
    position: relative;
    max-width: rems($content-width);
  }
}

.main-content-wrap {
  padding-top: $gutter-spacing-sm;
  padding-bottom: $gutter-spacing-sm;

  @include container;

  @include mq(md) {
    padding-top: $gutter-spacing;
    padding-bottom: $gutter-spacing;
  }
}

.main-header {
  z-index: 0;
  border-bottom: $border $border-color;

  @include mq(md) {
    display: flex;
    justify-content: space-between;
    height: rems($header-height);
    background-color: $body-background-color;
    border-bottom: $border $border-color;
  }

  &.nav-open {
    display: block;

    @include mq(md) {
      display: flex;
    }
  }
}

.site-nav {
  display: none;

  &.nav-open {
    display: block;
  }

  @include mq(md) {
    display: block;
    padding-top: $sp-8;
    padding-bottom: $gutter-spacing-sm;
    overflow-y: auto;
    flex: 1 1 auto;
  }
}

.site-header {
  display: flex;
  min-height: rems($header-height);
  align-items: center;

  @include mq(md) {
    height: rems($header-height);
    max-height: rems($header-height);
    border-bottom: $border $border-color;
  }
}

.site-title {
  flex-grow: 1;
  display: flex;
  height: 100%;
  align-items: center;
  padding-top: $sp-3;
  padding-bottom: $sp-3;
  color: $body-heading-color;

  @include container;

  @include fs-6;

  @include mq(md) {
    padding-top: $sp-2;
    padding-bottom: $sp-2;
  }
}

@if meta.variable-exists(logo) {
  .site-logo {
    width: 100%;
    height: 100%;
    background-image: url($logo);
    background-repeat: no-repeat;
    background-position: left center;
    background-size: contain;
  }
}

.site-button {
  display: flex;
  height: 100%;
  padding: $gutter-spacing-sm;
  align-items: center;
}

@include mq(md) {
  .site-header .site-button {
    display: none;
  }
}

.site-title:hover {
  background-image: linear-gradient(
    -90deg,
    rgba($feedback-color, 1) 0%,
    rgba($feedback-color, 0.8) 80%,
    rgba($feedback-color, 0) 100%
  );
}

.site-button:hover {
  background-image: linear-gradient(
    -90deg,
    rgba($feedback-color, 1) 0%,
    rgba($feedback-color, 0.8) 100%
  );
}

.site-footer {
  position: absolute;
  bottom: 0;
  left: 0;
  padding-top: $sp-4;
  padding-bottom: $sp-4;
  color: $grey-dk-000;

  @include container;

  @include fs-2;

  @include mq(md) {
    position: static;
    justify-self: end;
  }
}

.icon {
  width: $sp-5;
  height: $sp-5;
  color: $link-color;
}
